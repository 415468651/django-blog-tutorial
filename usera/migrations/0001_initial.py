# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-05-25 03:44
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='ForumUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='生日')),
                ('self_intro', models.TextField(blank=True, null=True, verbose_name='个人简介')),
                ('mugshot', models.ImageField(blank=True, null=True, upload_to='/uploads', verbose_name='头像')),
                ('gender', models.CharField(blank=True, choices=[('M', 'male'), ('F', 'female')], max_length=1, null=True, verbose_name='性别')),
                ('sign_up_ip', models.GenericIPAddressField(null=True, verbose_name='注册时IP')),
                ('last_login_time', models.DateTimeField(auto_now=True, null=True, verbose_name='最后一次登录时间')),
                ('last_login_ip', models.GenericIPAddressField(null=True, verbose_name='最后一次登录IP')),
                ('website', models.URLField(blank=True, null=True, verbose_name='个人网站')),
                ('github', models.URLField(blank=True, null=True, verbose_name='GitHub主页地址')),
                ('nickname', models.CharField(blank=True, max_length=20, null=True, verbose_name='昵称')),
                ('sector', models.CharField(blank=True, max_length=200, null=True, verbose_name='所在单位')),
                ('position', models.CharField(blank=True, max_length=40, null=True, verbose_name='职位')),
                ('fans', models.ManyToManyField(related_name='_forumuser_fans_+', to=settings.AUTH_USER_MODEL, verbose_name='粉丝')),
                ('focus_users', models.ManyToManyField(related_name='_forumuser_focus_users_+', to=settings.AUTH_USER_MODEL, verbose_name='关注的人')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'users',
                'abstract': False,
                'verbose_name': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
